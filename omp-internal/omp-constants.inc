#if defined OPEN_MP
	#if !defined MAX_PLAYER_NAME
		#define MAX_PLAYER_NAME                    (24)
	#endif

	#if !defined MAX_PLAYERS
		#define MAX_PLAYERS                        (1000)
	#endif

	#if !defined MAX_VEHICLES
		#define MAX_VEHICLES                       (2000)
	#endif

	#if !defined MAX_ACTORS
		#define MAX_ACTORS                         (1000)
	#endif

	#if !defined MAX_OBJECTS
		#define MAX_OBJECTS                        (2000)
	#endif

	#if !defined MAX_GANG_ZONES
		#define MAX_GANG_ZONES                     (1024)
	#endif

	#if !defined MAX_TEXT_DRAWS
		#define MAX_TEXT_DRAWS                     (Text:2048)
	#endif

	#if !defined MAX_PLAYER_TEXT_DRAWS
		#define MAX_PLAYER_TEXT_DRAWS              (PlayerText:256)
	#endif

	#if !defined MAX_MENUS
		#define MAX_MENUS                          (Menu:128)
	#endif

	#if !defined MAX_3DTEXT_GLOBAL
		#define MAX_3DTEXT_GLOBAL                  (Text3D:1024)
	#endif

	#if !defined MAX_3DTEXT_PLAYER
		#define MAX_3DTEXT_PLAYER                  (PlayerText3D:1024)
	#endif

	#if !defined MAX_PICKUPS
		#define MAX_PICKUPS                        (4096)
	#endif
#endif

// Invalids
#define NO_TEAM                                (255)

#define INVALID_PLAYER_ID                      (0xFFFF)
#define INVALID_VEHICLE_ID                     (0xFFFF)
#define INVALID_ACTOR_ID                       (0xFFFF)
#define INVALID_OBJECT_ID                      (0xFFFF)
#define INVALID_MENU                           (Menu:0xFF)
#define INVALID_TEXT_DRAW                      (Text:0xFFFF)
#define INVALID_PLAYER_TEXT_DRAW               (PlayerText:0xFFFF)
#define INVALID_GANG_ZONE                      (-1)
#define INVALID_3DTEXT_ID                      (Text3D:0xFFFF)
#define INVALID_PLAYER_3DTEXT_ID               (PlayerText3D:0xFFFF)

// States
enum
{
	PLAYER_STATE_NONE,
	PLAYER_STATE_ONFOOT,
	PLAYER_STATE_DRIVER,
	PLAYER_STATE_PASSENGER,
	_PLAYER_STATE_EXIT_VEHICLE,
	_PLAYER_STATE_ENTER_DRIVER,
	_PLAYER_STATE_ENTER_PASSENGER,
	PLAYER_STATE_WASTED,
	PLAYER_STATE_SPAWNED,
	PLAYER_STATE_SPECTATING,
}

// Internal states.
#define PLAYER_STATE_EXIT_VEHICLE              (_PLAYER_STATE_EXIT_VEHICLE)
#define PLAYER_STATE_ENTER_VEHICLE_DRIVER      (_PLAYER_STATE_ENTER_DRIVER)
#define PLAYER_STATE_ENTER_VEHICLE_PASSENGER   (_PLAYER_STATE_ENTER_PASSENGER)

enum (+= 10)
{
	_OBJECT_MATERIAL_SIZE_0x0,
	OBJECT_MATERIAL_SIZE_32x32,
	OBJECT_MATERIAL_SIZE_64x32,
	OBJECT_MATERIAL_SIZE_64x64,
	OBJECT_MATERIAL_SIZE_128x32,
	OBJECT_MATERIAL_SIZE_128x64,
	OBJECT_MATERIAL_SIZE_128x128,
	OBJECT_MATERIAL_SIZE_256x32,
	OBJECT_MATERIAL_SIZE_256x64,
	OBJECT_MATERIAL_SIZE_256x128,
	OBJECT_MATERIAL_SIZE_256x256,
	OBJECT_MATERIAL_SIZE_512x64,
	OBJECT_MATERIAL_SIZE_512x128,
	OBJECT_MATERIAL_SIZE_512x256,
	OBJECT_MATERIAL_SIZE_512x512,
}

enum MaterialSize (+= 10)
{
	_MATERIAL_SIZE_0x0,
	MATERIAL_SIZE_32x32,
	MATERIAL_SIZE_64x32,
	MATERIAL_SIZE_64x64,
	MATERIAL_SIZE_128x32,
	MATERIAL_SIZE_128x64,
	MATERIAL_SIZE_128x128,
	MATERIAL_SIZE_256x32,
	MATERIAL_SIZE_256x64,
	MATERIAL_SIZE_256x128,
	MATERIAL_SIZE_256x256,
	MATERIAL_SIZE_512x64,
	MATERIAL_SIZE_512x128,
	MATERIAL_SIZE_512x256,
	MATERIAL_SIZE_512x512,
}

#define OBJECT_MATERIAL_TEXT_ALIGN_LEFT   (0)
#define OBJECT_MATERIAL_TEXT_ALIGN_CENTER (1)
#define OBJECT_MATERIAL_TEXT_ALIGN_RIGHT  (2)

enum MaterialTextAlign
{
	MATERIAL_TEXT_ALIGN_LEFT,
	MATERIAL_TEXT_ALIGN_CENTER,
	MATERIAL_TEXT_ALIGN_RIGHT,
}

// Limits
stock const MAX_PLAYER_ATTACHED_OBJECTS = 10;
stock const MAX_CHATBUBBLE_LENGTH = 144;

enum
{
	WEAPONSTATE_UNKNOWN         = -1,
	WEAPONSTATE_NO_BULLETS		= 0,
	WEAPONSTATE_LAST_BULLET	    = 1,
	WEAPONSTATE_MORE_BULLETS	= 2,
	WEAPONSTATE_RELOADING		= 3,
}

enum WeaponState
{
	WEAPON_STATE_UNKNOWN        = -1,
	WEAPON_STATE_NO_BULLETS		= 0,
	WEAPON_STATE_LAST_BULLET	= 1,
	WEAPON_STATE_MORE_BULLETS	= 2,
	WEAPON_STATE_RELOADING		= 3,
}

enum
{
	FIGHT_STYLE_NORMAL      = 4,
	FIGHT_STYLE_BOXING	    = 5,
	FIGHT_STYLE_KUNGFU		= 6,
	FIGHT_STYLE_KNEEHEAD	= 7,
	FIGHT_STYLE_GRABKICK	= 15,
	FIGHT_STYLE_ELBOW		= 16,
}

enum FightingStyle
{
	FIGHTING_STYLE_NORMAL   = 4,
	FIGHTING_STYLE_BOXING	= 5,
	FIGHTING_STYLE_KUNGFU	= 6,
	FIGHTING_STYLE_KNEEHEAD	= 7,
	FIGHTING_STYLE_GRABKICK	= 15,
	FIGHTING_STYLE_ELBOW	= 16,
}

enum
{
	WEAPONSKILL_PISTOL,
	WEAPONSKILL_PISTOL_SILENCED,
	WEAPONSKILL_DESERT_EAGLE,
	WEAPONSKILL_SHOTGUN,
	WEAPONSKILL_SAWNOFF_SHOTGUN,
	WEAPONSKILL_SPAS12_SHOTGUN,
	WEAPONSKILL_MICRO_UZI,
	WEAPONSKILL_MP5,
	WEAPONSKILL_AK47,
	WEAPONSKILL_M4,
	WEAPONSKILL_SNIPERRIFLE,
}

enum WeaponSkill
{
	WEAPON_SKILL_PISTOL,
	WEAPON_SKILL_PISTOL_SILENCED,
	WEAPON_SKILL_DESERT_EAGLE,
	WEAPON_SKILL_SHOTGUN,
	WEAPON_SKILL_SAWNOFF_SHOTGUN,
	WEAPON_SKILL_SPAS12_SHOTGUN,
	WEAPON_SKILL_MICRO_UZI,
	WEAPON_SKILL_MP5,
	WEAPON_SKILL_AK47,
	WEAPON_SKILL_M4,
	WEAPON_SKILL_SNIPERRIFLE,
}

enum
{
	SPECIAL_ACTION_NONE,
	SPECIAL_ACTION_DUCK,
	SPECIAL_ACTION_USEJETPACK,
	SPECIAL_ACTION_ENTER_VEHICLE,
	SPECIAL_ACTION_EXIT_VEHICLE,
	SPECIAL_ACTION_DANCE1,
	SPECIAL_ACTION_DANCE2,
	SPECIAL_ACTION_DANCE3,
	SPECIAL_ACTION_DANCE4,
	SPECIAL_ACTION_HANDSUP    = 10,
	SPECIAL_ACTION_USECELLPHONE,
	SPECIAL_ACTION_SITTING,
	SPECIAL_ACTION_STOPUSECELLPHONE,
	SPECIAL_ACTION_DRINK_BEER = 20,
	SPECIAL_ACTION_SMOKE_CIGGY,
	SPECIAL_ACTION_DRINK_WINE,
	SPECIAL_ACTION_DRINK_SPRUNK,
	SPECIAL_ACTION_CUFFED,
	SPECIAL_ACTION_CARRY,
	SPECIAL_ACTION_PISSING    = 68,
}

enum SpecialAction
{
	SPECACT_NONE,
	SPECACT_DUCK,
	SPECACT_USE_JETPACK,
	SPECACT_ENTER_VEHICLE,
	SPECACT_EXIT_VEHICLE,
	SPECACT_DANCE_1,
	SPECACT_DANCE_2,
	SPECACT_DANCE_3,
	SPECACT_DANCE_4,
	SPECACT_HANDS_UP          = 10,
	SPECACT_USE_CELLPHONE,
	SPECACT_SITTING,
	SPECACT_STOP_USE_CELLPHONE,
	SPECACT_DRINK_BEER        = 20,
	SPECACT_SMOKE_CIGGY,
	SPECACT_DRINK_WINE,
	SPECACT_DRINK_SPRUNK,
	SPECACT_CUFFED,
	SPECACT_CARRY,
	SPECACT_PISSING           = 68,
}

// PVar enumeration
enum
{
	PLAYER_VARTYPE_NONE,
	PLAYER_VARTYPE_INT,
	PLAYER_VARTYPE_STRING,
	PLAYER_VARTYPE_FLOAT,
}

enum PVarType
{
	PVAR_TYPE_NONE,
	PVAR_TYPE_INT,
	PVAR_TYPE_STRING,
	PVAR_TYPE_FLOAT,
}

enum
{
	MAPICON_LOCAL,             // Displays in the player's local area
	MAPICON_GLOBAL,            // Displays always
	MAPICON_LOCAL_CHECKPOINT,  // Displays in the player's local area and has a checkpoint marker
	MAPICON_GLOBAL_CHECKPOINT, // Displays always and has a checkpoint marker
}

enum MapIcon
{
	MAP_ICON_LOCAL,             // Displays in the player's local area
	MAP_ICON_GLOBAL,            // Displays always
	MAP_ICON_LOCAL_CHECKPOINT,  // Displays in the player's local area and has a checkpoint marker
	MAP_ICON_GLOBAL_CHECKPOINT, // Displays always and has a checkpoint marker
}

enum
{
	CAMERA_MOVE = 1,
	CAMERA_CUT,
}

enum CameraMovement
{
	CAMERA_MOVEMENT_SMOOTH = 1,
	CAMERA_MOVEMENT_CUT,
}

// Spectating
enum
{
	SPECTATE_MODE_NORMAL = 1,
	SPECTATE_MODE_FIXED,
	SPECTATE_MODE_SIDE,
}

enum SpectateCamera
{
	SPECTATE_CAMERA_NORMAL = 1,
	SPECTATE_CAMERA_FIXED,
	SPECTATE_CAMERA_SIDE,
}

// Recording for NPC playback
enum
{
	PLAYER_RECORDING_TYPE_NONE,
	PLAYER_RECORDING_TYPE_DRIVER,
	PLAYER_RECORDING_TYPE_ONFOOT,
}

enum NPCRecordingType
{
	NPC_RECORDING_TYPE_NONE,
	NPC_RECORDING_TYPE_DRIVER,
	NPC_RECORDING_TYPE_ONFOOT,
}

enum ScreenMode
{
	SCREEN_MODE_NORMAL,
	SCREEN_MODE_LETTERBOX,
	SCREEN_MODE_WIDESCREEN,
}

enum CameraMode
{
	// Train/tram camera.
	CAMERA_MODE_TRAIN = 3,
	// Follow ped (normal behind player camera).
	CAMERA_MODE_PLAYER_BEHIND = 4,
	// Sniper aiming.
	CAMERA_MODE_AIMING_SNIPER = 7,
	// Rocket Launcher aiming.
	CAMERA_MODE_AIMING_ROCKET = 8,
	// Fixed camera (non-moving) - used for Pay 'n' Spray, chase camera, tune shops, entering buildings, buying food etc.
	CAMERA_MODE_FIXED = 15,
	// Vehicle front camera, bike side camera.
	CAMERA_MODE_VEHICLE_DRIVER = 16,
	// Normal car (+skimmer+helicopter+airplane), several variable distances.
	CAMERA_MODE_VEHICLE_BEHIND = 18,
	// Normal boat camera.
	CAMERA_MODE_BOAT = 22,
	// Camera weapon aiming.
	CAMERA_MODE_AIMING_CAMERA = 46,
	// Heat-seeking Rocket Launcher aiming.
	CAMERA_MODE_AIMING_HEAT_SEEKER = 51,
	// Aiming any other weapon.
	CAMERA_MODE_AIMING = 53,
	// Vehicle passenger drive-by camera.
	CAMERA_MODE_DRIVE_BY = 55,
	// Chase camera: helicopter/bird view.
	CAMERA_MODE_CHASE_BIRD = 56,
	// Chase camera: ground camera, zooms in very quickly. (Similar to 56, but on the ground.)
	CAMERA_MODE_CHASE_GROUND = 57,
	// Chase camera: horizontal flyby past vehicle.
	CAMERA_MODE_CHASE_FLYBY = 58,
	// Chase camera (for air vehicles only): ground camera, looking up to the air vehicle.
	CAMERA_MODE_CHASE_LOOK_UP = 59,
	// Chase camera (for air vehicles only): vertical flyby past air vehicle.
	CAMERA_MODE_CHASE_VERTICAL = 62,
	// Chase camera (for air vehicles only): horizontal flyby past air vehicle (similar to 58 and 62).
	CAMERA_MODE_CHASE_HOROZONTAL = 63,
	// Chase camera (for air vehicles only): camera focused on pilot, similar to pressing LOOK_BEHIND key on foot, but in air vehicle.
	CAMERA_MODE_CHASE_PILOT = 64,
}

enum CheckType
{
	// Returns 32 flags of entity in CPhysical (if player is in vehicle, it sends data related to
	// vehicle, if player is on foot, well.. it's player).
	CHECK_TYPE_PHYSICAL_FLAGS = 2,
	// Checksum of size bytes from arg + offset address (GTA memory) and returns it into response
	// argument, and arg should be within GTA memory boundaries.
	CHECK_TYPE_HASH_GTA_MEMORY = 5,
	// Checksum of size bytes from arg + offset address (SAMP memory) and returns it into response
	// argument, and arg should be within GTA memory boundaries (0x0 - 0xC3500).
	CHECK_TYPE_HASH_SAMP_MEMORY = 69,
	// Checksum of given model's CModelInfo (data in CModelInfo class).
	CHECK_TYPE_HASH_MODEL_INFO = 70,
	// Checksum of given model's ColModel (data in CColModel class).
	CHECK_TYPE_HASH_COL_MODEL = 71,
	// Uptime of player's computer.
	CHECK_TYPE_UPTIME = 72,
}

enum PhysicalFlags (<<= 1)
{
	// 0-7
	_PHYSICAL_FLAG_UNK_1 = 1,
	PHYSICAL_FLAG_GRAVITY,
	PHYSICAL_FLAG_IMPACT,
	PHYSICAL_FLAG_COLLISIONS,
	PHYSICAL_FLAG_MOMENTUM,
	PHYSICAL_FLAG_NO_MASS,
	PHYSICAL_FLAG_INFINITE_MASS,
	PHYSICAL_FLAG_Z_DISABLED,
	// 8-15
	PHYSICAL_FLAG_IN_WATER,
	PHYSICAL_FLAG_ON_GROUND,
	PHYSICAL_FLAG_BROKEN,
	_PHYSICAL_FLAG_UNK_2,
	_PHYSICAL_FLAG_UNK_3,
	PHYSICAL_FLAG_NO_SPEED,
	_PHYSICAL_FLAG_UNK_4,
	_PHYSICAL_FLAG_UNK_5,
	// 16-23
	_PHYSICAL_FLAG_UNK_6,
	_PHYSICAL_FLAG_UNK_7,
	PHYSICAL_FLAG_BULLET_PROOF,
	PHYSICAL_FLAG_FIRE_PROOF,
	PHYSICAL_FLAG_COLLISION_PROOF,
	PHYSICAL_FLAG_MELEE_PROOF,
	PHYSICAL_FLAG_INVULNERABLE,
	PHYSICAL_FLAG_EXPLOSION_PROOF,
	// 24-31
	_PHYSICAL_FLAG_UNK_8,
	PHYSICAL_FLAG_ATTACHED,
	_PHYSICAL_FLAG_UNK_9,
	PHYSICAL_FLAG_ON_WATER,
	PHYSICAL_FLAG_COLLIDABLE,
	PHYSICAL_FLAG_DESTROYED,
	_PHYSICAL_FLAG_UNK_10,
	_PHYSICAL_FLAG_UNK_11,
}

enum
{
	// Marker modes used by ShowPlayerMarkers()
	PLAYER_MARKERS_MODE_OFF,
	PLAYER_MARKERS_MODE_GLOBAL,
	PLAYER_MARKERS_MODE_STREAMED,
}

enum
{
	// Weapons
	WEAPON_BRASSKNUCKLE = 1,
	WEAPON_GOLFCLUB,
	WEAPON_NITESTICK,
	WEAPON_KNIFE,
	WEAPON_BAT,
	WEAPON_SHOVEL,
	WEAPON_POOLSTICK,
	WEAPON_KATANA,
	WEAPON_CHAINSAW,
	WEAPON_DILDO,
	WEAPON_DILDO2,
	WEAPON_VIBRATOR,
	WEAPON_VIBRATOR2,
	WEAPON_FLOWER,
	WEAPON_CANE,
	WEAPON_GRENADE,
	WEAPON_TEARGAS,
	WEAPON_MOLTOV,
	WEAPON_COLT45 = 22,
	WEAPON_SILENCED,
	WEAPON_DEAGLE,
	WEAPON_SHOTGUN,
	WEAPON_SAWEDOFF,
	WEAPON_SHOTGSPA,
	WEAPON_UZI,
	WEAPON_MP5,
	WEAPON_AK47,
	WEAPON_M4,
	WEAPON_TEC9,
	WEAPON_RIFLE,
	WEAPON_SNIPER,
	WEAPON_ROCKETLAUNCHER,
	WEAPON_HEATSEEKER,
	WEAPON_FLAMETHROWER,
	WEAPON_MINIGUN,
	WEAPON_SATCHEL,
	WEAPON_BOMB,
	WEAPON_SPRAYCAN,
	WEAPON_FIREEXTINGUISHER,
	WEAPON_CAMERA,
	WEAPON_PARACHUTE = 46,
	WEAPON_VEHICLE = 49,
	WEAPON_DROWN = 53,
	WEAPON_COLLISION,
}

enum (<<= 1)
{
	// Keys
	KEY_ACTION = 1,
	KEY_CROUCH,
	KEY_FIRE,
	KEY_SPRINT,
	KEY_SECONDARY_ATTACK,
	KEY_JUMP,
	KEY_LOOK_RIGHT,
	KEY_HANDBRAKE,
	KEY_LOOK_LEFT,
	KEY_SUBMISSION,
	KEY_LOOK_BEHIND = KEY_SUBMISSION,
	KEY_WALK,
	KEY_ANALOG_UP,
	KEY_ANALOG_DOWN,
	KEY_ANALOG_LEFT,
	KEY_ANALOG_RIGHT,
	KEY_YES,
	KEY_NO,
	KEY_CTRL_BACK,
}

enum
{
	KEY_UP = -128,
	KEY_DOWN = 128,
	KEY_LEFT = -128,
	KEY_RIGHT = 128,
}

enum
{
	// Player GUI Dialog
	DIALOG_STYLE_MSGBOX,
	DIALOG_STYLE_INPUT,
	DIALOG_STYLE_LIST,
	DIALOG_STYLE_PASSWORD,
	DIALOG_STYLE_TABLIST,
	DIALOG_STYLE_TABLIST_HEADERS,
}

enum
{
	// Text Draw
	TEXT_DRAW_FONT_0,
	TEXT_DRAW_FONT_1,
	TEXT_DRAW_FONT_2,
	TEXT_DRAW_FONT_3,
	TEXT_DRAW_FONT_SPRITE_DRAW,
	TEXT_DRAW_FONT_MODEL_PREVIEW,
}

enum
{
	// SVar enumeration
	SERVER_VARTYPE_NONE,
	SERVER_VARTYPE_INT,
	SERVER_VARTYPE_STRING,
	SERVER_VARTYPE_FLOAT,
}

enum
{
	// Artwork/NetModels
	DOWNLOAD_REQUEST_EMPTY,
	DOWNLOAD_REQUEST_MODEL_FILE,
	DOWNLOAD_REQUEST_TEXTURE_FILE,
}

enum
{
	CLICK_SOURCE_SCOREBOARD,
}

enum
{
	EDIT_RESPONSE_CANCEL,
	EDIT_RESPONSE_FINAL,
	EDIT_RESPONSE_UPDATE,
}

enum
{
	SELECT_OBJECT_GLOBAL_OBJECT = 1,
	SELECT_OBJECT_PLAYER_OBJECT,
}

enum
{
	BULLET_HIT_TYPE_NONE,
	BULLET_HIT_TYPE_PLAYER,
	BULLET_HIT_TYPE_VEHICLE,
	BULLET_HIT_TYPE_OBJECT,
	BULLET_HIT_TYPE_PLAYER_OBJECT,
}

enum MarkerMode
{
	// Marker modes used by ShowPlayerMarkers()
	MARKER_MODE_OFF,
	MARKER_MODE_GLOBAL,
	MARKER_MODE_STREAMED,
}

enum Weapons
{
	// Weapons
	WEAPONS_BRASSKNUCKLE = 1,
	WEAPONS_BRASS_KNUCKLE = WEAPONS_BRASSKNUCKLE,
	WEAPONS_GOLFCLUB,
	WEAPONS_NITESTICK,
	WEAPONS_KNIFE,
	WEAPONS_BAT,
	WEAPONS_SHOVEL,
	WEAPONS_POOLSTICK,
	WEAPONS_POOL_STICK = WEAPONS_POOLSTICK,
	WEAPONS_KATANA,
	WEAPONS_CHAINSAW,
	WEAPONS_DILDO,
	WEAPONS_DILDO2,
	WEAPONS_DILDO_2 = WEAPONS_DILDO2,
	WEAPONS_VIBRATOR,
	WEAPONS_VIBRATOR2,
	WEAPONS_VIBRATOR_2 = WEAPONS_VIBRATOR2,
	WEAPONS_FLOWER,
	WEAPONS_CANE,
	WEAPONS_GRENADE,
	WEAPONS_TEARGAS,
	WEAPONS_MOLTOV,
	WEAPONS_COLT45 = 22,
	WEAPONS_SILENCED,
	WEAPONS_DEAGLE,
	WEAPONS_DESERT_EAGLE = WEAPONS_DEAGLE,
	WEAPONS_SHOTGUN,
	WEAPONS_SAWEDOFF,
	WEAPONS_SAWED_OFF = WEAPONS_SAWEDOFF,
	WEAPONS_SHOTGSPA,
	WEAPONS_SHOTGUN_SPAZ = WEAPONS_SHOTGSPA,
	WEAPONS_UZI,
	WEAPONS_MP5,
	WEAPONS_AK47,
	WEAPONS_M4,
	WEAPONS_TEC9,
	WEAPONS_RIFLE,
	WEAPONS_SNIPER,
	WEAPONS_ROCKETLAUNCHER,
	WEAPONS_ROCKET_LAUNCHER = WEAPONS_ROCKETLAUNCHER,
	WEAPONS_HEATSEEKER,
	WEAPONS_HEAT_SEEKER = WEAPONS_HEATSEEKER,
	WEAPONS_FLAMETHROWER,
	WEAPONS_FLAME_THROWER = WEAPONS_FLAMETHROWER,
	WEAPONS_MINIGUN,
	WEAPONS_SATCHEL,
	WEAPONS_BOMB,
	WEAPONS_SPRAYCAN,
	WEAPONS_FIREEXTINGUISHER,
	WEAPONS_FIRE_EXTINGUISHER = WEAPONS_FIREEXTINGUISHER,
	WEAPONS_CAMERA,
	WEAPONS_PARACHUTE = 46,
	WEAPONS_VEHICLE = 49,
	WEAPONS_DROWN = 53,
	WEAPONS_COLLISION,
}

enum (<<= 1)
{
	// Keys
	KEY_ACTION = 1,
	KEY_CROUCH,
	KEY_FIRE,
	KEY_SPRINT,
	KEY_SECONDARY_ATTACK,
	KEY_JUMP,
	KEY_LOOK_RIGHT,
	KEY_HANDBRAKE,
	KEY_LOOK_LEFT,
	KEY_SUBMISSION,
	KEY_LOOK_BEHIND = KEY_SUBMISSION,
	KEY_WALK,
	KEY_ANALOG_UP,
	KEY_ANALOG_DOWN,
	KEY_ANALOG_LEFT,
	KEY_ANALOG_RIGHT,
	KEY_YES,
	KEY_NO,
	KEY_CTRL_BACK,
}

enum Action (<<= 1)
{
	// Keys
	CONTROL_ACTION = 1,
	CONTROL_CROUCH,
	CONTROL_FIRE,
	CONTROL_SPRINT,
	CONTROL_SECONDARY_ATTACK,
	CONTROL_JUMP,
	CONTROL_LOOK_RIGHT,
	CONTROL_HANDBRAKE,
	CONTROL_LOOK_LEFT,
	CONTROL_SUBMISSION,
	CONTROL_LOOK_BEHIND = KEY_SUBMISSION,
	CONTROL_WALK,
	CONTROL_ANALOG_UP,
	CONTROL_ANALOG_DOWN,
	CONTROL_ANALOG_LEFT,
	CONTROL_ANALOG_RIGHT,
	CONTROL_YES,
	CONTROL_NO,
	CONTROL_CTRL_BACK,
}

enum Direction
{
	DIRECTION_UP = -128,
	DIRECTION_DOWN = 128,
	DIRECTION_LEFT = -128,
	DIRECTION_RIGHT = 128,
}

enum GUIStyle
{
	// Player GUI Dialog
	GUI_STYLE_MSGBOX,
	GUI_STYLE_INPUT,
	GUI_STYLE_LIST,
	GUI_STYLE_PASSWORD,
	GUI_STYLE_TABLIST,
	GUI_STYLE_TABLIST_HEADERS,
}

enum TDFont
{
	// Text Draw
	TD_FONT_0,
	TD_FONT_1,
	TD_FONT_2,
	TD_FONT_3,
	TD_FONT_SPRITE_DRAW,
	TD_FONT_MODEL_PREVIEW,
}

enum SVarType
{
	// SVar enumeration
	SVAR_TYPE_NONE,
	SVAR_TYPE_INT,
	SVAR_TYPE_STRING,
	SVAR_TYPE_FLOAT,
}

enum DLRequest
{
	// Artwork/NetModels
	DL_REQUEST_EMPTY,
	DL_REQUEST_MODEL_FILE,
	DL_REQUEST_TEXTURE_FILE,
}

//enum
//{
//	CLICK_SOURCE_SCOREBOARD,
//}

enum EditResponse
{
	EDITOR_CANCEL,
	EDITOR_FINAL,
	EDITOR_UPDATE,
}

// Not needed, we no longer distinguish.
//enum SelectObject
//{
//	SELECT_OBJECT_GLOBAL_OBJECT = 1,
//	SELECT_OBJECT_PLAYER_OBJECT,
//}

enum HitType
{
	HIT_TYPE_NONE,
	HIT_TYPE_PLAYER,
	HIT_TYPE_VEHICLE,
	HIT_TYPE_OBJECT,
	HIT_TYPE_PLAYER_OBJECT,
}

enum
{
	CARMODTYPE_SPOILER,
	CARMODTYPE_HOOD,
	CARMODTYPE_ROOF,
	CARMODTYPE_SIDESKIRT,
	CARMODTYPE_LAMPS,
	CARMODTYPE_NITRO,
	CARMODTYPE_EXHAUST,
	CARMODTYPE_WHEELS,
	CARMODTYPE_STEREO,
	CARMODTYPE_HYDRAULICS,
	CARMODTYPE_FRONT_BUMPER,
	CARMODTYPE_REAR_BUMPER,
	CARMODTYPE_VENT_RIGHT,
	CARMODTYPE_VENT_LEFT,
}

enum
{
	VEHICLE_PARAMS_UNSET = -1,
	VEHICLE_PARAMS_OFF,
	VEHICLE_PARAMS_ON,
}

enum
{
	VEHICLE_MODEL_INFO_SIZE = 1,
	VEHICLE_MODEL_INFO_FRONTSEAT,
	VEHICLE_MODEL_INFO_REARSEAT,
	VEHICLE_MODEL_INFO_PETROLCAP,
	VEHICLE_MODEL_INFO_WHEELSFRONT,
	VEHICLE_MODEL_INFO_WHEELSREAR,
	VEHICLE_MODEL_INFO_WHEELSMID,
}

#define VEHICLE_MODEL_INFO_FRONT_BUMPER_Z (8)
#define VEHICLE_MODEL_INFO_REAR_BUMPER_Z  (0)

enum VehicleMod
{
	VEHICLE_MOD_SPOILER,
	VEHICLE_MOD_HOOD,
	VEHICLE_MOD_ROOF,
	VEHICLE_MOD_SIDESKIRT,
	VEHICLE_MOD_LAMPS,
	VEHICLE_MOD_NITRO,
	VEHICLE_MOD_EXHAUST,
	VEHICLE_MOD_WHEELS,
	VEHICLE_MOD_STEREO,
	VEHICLE_MOD_HYDRAULICS,
	VEHICLE_MOD_FRONT_BUMPER,
	VEHICLE_MOD_REAR_BUMPER,
	VEHICLE_MOD_VENT_RIGHT,
	VEHICLE_MOD_VENT_LEFT,
}

enum VehicleParam
{
	VEHICLE_PARAM_UNSET = -1,
	VEHICLE_PARAM_OFF,
	VEHICLE_PARAM_ON,
}

enum VehicleInfo
{
	VEHICLE_INFO_SIZE = 1,
	VEHICLE_INFO_FRONTSEAT,
	VEHICLE_INFO_REARSEAT,
	VEHICLE_INFO_PETROLCAP,
	VEHICLE_INFO_WHEELSFRONT,
	VEHICLE_INFO_WHEELSREAR,
	VEHICLE_INFO_WHEELSMID,
	VEHICLE_INFO_FRONT_BUMPER_Z,
	VEHICLE_INFO_REAR_BUMPER_Z,
}

// HTTP requests
enum
{
	HTTP_GET = 1,
	HTTP_POST,
	HTTP_HEAD,
}

enum HttpMethod
{
	HTTP_METHOD_GET = 1,
	HTTP_METHOD_POST,
	HTTP_METHOD_HEAD,
	HTTP_METHOD_PUT,
	HTTP_METHOD_DELETE,
	HTTP_METHOD_CONNECT,
	HTTP_METHOD_OPTIONS,
	HTTP_METHOD_TRACE,
	HTTP_METHOD_PATCH,
}

// HTTP Status Codes
enum
{
	HTTP_ERROR_BAD_HOST = 1,
	HTTP_ERROR_NO_SOCKET,
	HTTP_ERROR_CANT_CONNECT,
	HTTP_ERROR_CANT_WRITE,
	HTTP_ERROR_CONTENT_TOO_BIG,
	HTTP_ERROR_MALFORMED_RESPONSE,
}

enum HttpCode
{
	// Internal
	HTTP_CODE_BAD_HOST					= 1,
	HTTP_CODE_NO_SOCKET					= 2,
	HTTP_CODE_CANT_CONNECT				= 3,
	HTTP_CODE_CANT_WRITE				= 4,
	HTTP_CODE_CONTENT_TOO_BIG			= 5,
	HTTP_CODE_MALFORMED_RESPONSE		= 6,

	// Information
	HTTP_CODE_CONTINUE					= 100,
	HTTP_CODE_SWITCHING_PROTOCOLS		= 101,
	HTTP_CODE_PROCESSING				= 102,
	HTTP_CODE_EARLY_HINTS				= 103,

	// Success
	HTTP_CODE_OK						= 200,
	HTTP_CODE_CREATED					= 201,
	HTTP_CODE_ACCEPTED					= 202,
	HTTP_CODE_NON_AUTH_INFO				= 203,
	HTTP_CODE_NO_CONTENT				= 204,
	HTTP_CODE_RESET_CONTENT				= 205,
	HTTP_CODE_PARTIAL_CONTENT			= 206,
	HTTP_CODE_MULTI_STATUS				= 207,
	HTTP_CODE_ALREADY_REPORTED			= 208,
	HTTP_CODE_IM_USED					= 226,

	// Redirection
	HTTP_CODE_MULTIPLE_CHOICES			= 300,
	HTTP_CODE_MOVED_PERMANENTLY			= 301,
	HTTP_CODE_FOUND						= 302,
	HTTP_CODE_SEE_OTHER					= 303,
	HTTP_CODE_NOT_MODIFIED				= 304,
	HTTP_CODE_USE_PROXY					= 305,
	HTTP_CODE_SWITCH_PROXY				= 306,
	HTTP_CODE_TEMPORARY_REDIRECT		= 307,
	HTTP_CODE_PERMANENT_REDIRECT		= 308,

	// Client_Errors
	HTTP_CODE_BAD_REQUEST				= 400,
	HTTP_CODE_UNAUTHORIZED				= 401,
	HTTP_CODE_PAYMENT_REQUIRED			= 402,
	HTTP_CODE_FORBIDDEN					= 403,
	HTTP_CODE_NOT_FOUND					= 404,
	HTTP_CODE_METHOD_NOT_ALLOWED		= 405,
	HTTP_CODE_NOT_ACCEPTABLE			= 406,
	HTTP_CODE_PROXY_AUTH_REQUIRED		= 407,
	HTTP_CODE_REQUEST_TIMEOUT			= 408,
	HTTP_CODE_CONFLICT					= 409,
	HTTP_CODE_GONE						= 410,
	HTTP_CODE_LENGTH_REQUIRED			= 411,
	HTTP_CODE_PRECONDITION_FAILED		= 412,
	HTTP_CODE_PAYLOAD_TOO_LARGE			= 413,
	HTTP_CODE_URI_TOO_LONG				= 414,
	HTTP_CODE_UNSUPPORTED_MEDIA			= 415,
	HTTP_CODE_RANGE_NOT_SATISFIABLE		= 416,
	HTTP_CODE_EXPECTATION_FAILED		= 417,
	HTTP_CODE_IM_A_TEAPOT				= 418,
	HTTP_CODE_MISDIRECTED_REQUEST		= 421,
	HTTP_CODE_UNPROCESSABLE_ENTITY		= 422,
	HTTP_CODE_LOCKED					= 423,
	HTTP_CODE_FAILED_DEPENDENCY			= 424,
	HTTP_CODE_TOO_EARLY					= 425,
	HTTP_CODE_UPGRADE_REQUIRED			= 426,
	HTTP_CODE_PRECONDITION_REQUIRED		= 428,
	HTTP_CODE_TOO_MANY_REQUESTS			= 429,
	HTTP_CODE_LARGE_HEADER_FIELDS_1		= 431,
	HTTP_CODE_UNAVAILABLE_FOR_LEGAL		= 451,

	// Server_Errors
	HTTP_CODE_INTERNAL_SERVER_ERROR		= 500,
	HTTP_CODE_NOT_IMPLEMENTED			= 501,
	HTTP_CODE_BAD_GATEWAY				= 502,
	HTTP_CODE_SERVICE_UNAVAILABLE		= 503,
	HTTP_CODE_GATEWAY_TIMEOUT			= 504,
	HTTP_CODE_VERSION_NOT_SUPPORTED		= 505,
	HTTP_CODE_VARIANT_NEGOTIATES		= 506,
	HTTP_CODE_INSUFFICIENT_STORAGE		= 507,
	HTTP_CODE_LOOP_DETECTED				= 508,
	HTTP_CODE_NOT_EXTENDED				= 510,
	HTTP_CODE_NETWORK_AUTH_REQUIRED		= 511,

	// Unofficial_Codes
	HTTP_CODE_CHECKPOINT				= 103,
	HTTP_CODE_THIS_IS_FINE				= 218,
	HTTP_CODE_PAGE_EXPIRED				= 419,
	HTTP_CODE_METHOD_FAILURE			= 420,
	HTTP_CODE_ENHANCE_YOUR_CALM			= 420,
	HTTP_CODE_LARGE_HEADER_FIELDS_2		= 430,
	HTTP_CODE_PARENT_CONTROL_BLOCK		= 450,
	HTTP_CODE_INVALID_TOKEN				= 498,
	HTTP_CODE_TOKEN_REQUIRED			= 499,
	HTTP_CODE_OVER_BANDWIDTH_LIMIT		= 509,
	HTTP_CODE_SITE_IS_OVERLOADED		= 529,
	HTTP_CODE_SITE_IS_FROZEN			= 530,
	HTTP_CODE_NETWORK_READ_TIMEOUT		= 598,

	// IIS
	HTTP_CODE_LOGIN_TIME_OUT			= 440,
	HTTP_CODE_RETRY_WITH				= 449,
	HTTP_CODE_REDIRECT					= 451,

	// nginx
	HTTP_CODE_NO_RESPONSE				= 444,
	HTTP_CODE_HEADER_TOO_LARGE			= 494,
	HTTP_CODE_SSL_CERT_ERROR			= 495,
	HTTP_CODE_SSL_CERT_REQUIRED			= 496,
	HTTP_CODE_HTTP_SENT_TO_HTTPS		= 497,
	HTTP_CODE_CLIENT_CLOSED_REQUEST		= 499,

	// Cloudflare
	HTTP_CODE_ORIGIN_UNKNOWN_ERROR		= 520,
	HTTP_CODE_ORIGIN_IS_DOWN			= 521,
	HTTP_CODE_CONNECTION_TIMED_OUT		= 522,
	HTTP_CODE_ORIGIN_IS_UNREACHABLE		= 523,
	HTTP_CODE_A_TIMEOUT_OCCURRED		= 524,
	HTTP_CODE_SSL_HANDSHAKE_FAILED		= 525,
	HTTP_CODE_INVALID_SSL_CERT			= 526,
	HTTP_CODE_RAILGUN_ERROR				= 527,
	HTTP_CODE_1XXX_ERROR                = 530,

	// AWS
	HTTP_CODE_ELB_EARLY_CLOSE			= 460,
	HTTP_CODE_TOO_MANY_FORWARDS			= 463,
}

#if defined OPENMP_WEAK
	#define MaterialSizeTag			{MaterialSize, _}
	#define MaterialTextAlignTag	{MaterialTextAlign, _}
	#define WeaponStateTag			{WeaponState, _}
	#define FightingStyleTag		{FightingStyle, _}
	#define WeaponSkillTag			{WeaponSkill, _}
	#define SpecialActionTag		{SpecialAction, _}
	#define PVarTypeTag				{PVarType, _}
	#define MapIconTag				{MapIcon, _}
	#define CameraMovementTag		{CameraMovement, _}
	#define SpectateCameraTag		{SpectateCamera, _}
	#define NPCRecordingTypeTag		{NPCRecordingType, _}
	#define ScreenModeTag			{ScreenMode, _}
	#define CameraModeTag			{CameraMode, _}
	#define CheckTypeTag			{CheckType, _}
	#define PhysicalFlagsTag		{PhysicalFlags, _}
	#define MarkerModeTag			{MarkerMode, _}
	#define WeaponsTag				{Weapons, _}
	#define ActionTag				{Action, _}
	#define DirectionTag			{Direction, _}
	#define GUIStyleTag				{GUIStyle, _}
	#define TDFontTag				{TDFont, _}
	#define SVarTypeTag				{SVarType, _}
	#define DLRequestTag			{DLRequest, _}
	#define EditResponseTag			{EditResponse, _}
	#define HitTypeTag				{HitType, _}
	#define VehicleModTag			{VehicleMod, _}
	#define VehicleParamTag			{VehicleParam, _}
	#define VehicleInfoTag			{VehicleInfo, _}
	#define HttpMethodTag			{HttpMethod, _}
	#define HttpCodeTag				{HttpCode, _}
#else
	#define MaterialSizeTag			MaterialSize
	#define MaterialTextAlignTag	MaterialTextAlign
	#define WeaponStateTag			WeaponState
	#define FightingStyleTag		FightingStyle
	#define WeaponSkillTag			WeaponSkill
	#define SpecialActionTag		SpecialAction
	#define PVarTypeTag				PVarType
	#define MapIconTag				MapIcon
	#define CameraMovementTag		CameraMovement
	#define SpectateCameraTag		SpectateCamera
	#define NPCRecordingTypeTag		NPCRecordingType
	#define ScreenModeTag			ScreenMode
	#define CameraModeTag			CameraMode
	#define CheckTypeTag			CheckType
	#define PhysicalFlagsTag		PhysicalFlags
	#define MarkerModeTag			MarkerMode
	#define WeaponsTag				Weapons
	#define ActionTag				Action
	#define DirectionTag			Direction
	#define GUIStyleTag				GUIStyle
	#define TDFontTag				TDFont
	#define SVarTypeTag				SVarType
	#define DLRequestTag			DLRequest
	#define EditResponseTag			EditResponse
	#define HitTypeTag				HitType
	#define VehicleModTag			VehicleMod
	#define VehicleParamTag			VehicleParam
	#define VehicleInfoTag			VehicleInfo
	#define HttpMethodTag			HttpMethod
	#define HttpCodeTag				HttpCode
#endif

